#!/usr/bin/env python
 
import atpy, os
from pylab import *
from binomial import Binomial_lim
from scipy.stats.stats import spearmanr
 
mypath=os.getcwd()
if mypath.find('Users/rfinn') > -1:
    print "Running on Rose's mac pro"
    homedir='/Users/rfinn/'
    catalogdir=homedir+'Dropbox/Research/AlissaSeniorProject/ediscsClusters/'
elif mypath.find('home/rfinn') > -1:
    print "Running on coma"
    homedir='/home/rfinn/'
    catalogdir=homedir+'Dropbox/Research/AlissaSeniorProject/ediscsClusters/'
elif mypath.find('Users/alissaearle') > -1:
    print "Running on Alissa's mac pro"
    homedir='/Users/alissaearle/'
    catalogdir=homedir+'Dropbox/AlissaSeniorProject/ediscsClusters/'
elif mypath.find('Users/alfalfa') > -1:
    print "Running on the Big Mac in the Lab"
    homedir = '/Users/alfalfa/'
    catalogdir = homedir + 'ediscs/'
clustersigma={'cl1018.8-1211':486. ,'cl1037.9-1243':319. ,'cl1037.9-1243a':537. ,'cl1040.7-1155':418. ,'cl1040.7-1155a':179. ,'cl1040.7-1155b':259. ,'cl1054.4-1146':589. ,'cl1054.4-1146a':227. ,'cl1054.7-1245':504. ,'cl1054.7-1245a':182. ,'cl1059.2-1253': 510.,'cl1103.7-1245':534. ,'cl1103.7-1245a': 336.,'cl1103.7-1245b':252. ,'cl1138.2-1133':732. ,'cl1138.2-1133a':542. ,'cl1202.7-1224':518. ,'cl1216.8-1201':1018. ,'cl1227.9-1138':574. ,'cl1227.9-1138a':341. ,'cl1232.5-1250':1080. ,'cl1301.7-1139':687. ,'cl1301.7-1139a':391. ,'cl1353.0-1137':666. ,'cl1354.2-1230':648. ,'cl1354.2-1230a':433. ,'cl1411.1-1148':710. ,'cl1420.3-1236':218.}
 
clusterz={'cl1018.8-1211':.4735 ,'cl1037.9-1243':.5783 ,'cl1037.9-1243a':.4252 ,'cl1040.7-1155':.7043 ,'cl1040.7-1155a':.6316 ,'cl1040.7-1155b':.7798 ,'cl1054.4-1146':.6972 ,'cl1054.4-1146a':.6130 ,'cl1054.7-1245':.7498 ,'cl1054.7-1245a':.7305 ,'cl1059.2-1253':.4564 ,'cl1103.7-1245':.9586 ,'cl1103.7-1245a':.6261 ,'cl1103.7-1245b':.7031 ,'cl1138.2-1133':.4796 ,'cl1138.2-1133a':.4548 ,'cl1202.7-1224':.4240 ,'cl1216.8-1201':.7943 ,'cl1227.9-1138':.6357 ,'cl1227.9-1138a':.5826 ,'cl1232.5-1250':.5414 ,'cl1301.7-1139':.4828 ,'cl1301.7-1139a':.3969 ,'cl1353.0-1137':.5882 ,'cl1354.2-1230':.7620 ,'cl1354.2-1230a':.5952 ,'cl1411.1-1148':.5195 ,'cl1420.3-1236':.4962}
 
def spearman(x,y):
    rho,pvalue=spearmanr(x,y)
    print 'Spearman Rank Test:'
    print 'rho = %6.2f'%(rho)
    print 'p-vale = %6.5f (prob that samples are uncorrelated)'%(pvalue) 
    return rho,pvalue
 
class ediscsall:
    def __init__(self):
        infile1=catalogdir+'ediscs_spec1d_info.fits'
        infile2=catalogdir+'ediscs_kcorrect_v4.0.topcat.fits'
        infile3=catalogdir+'ediscs_ircatalogs_spec.fits'
        self.spec1d=atpy.Table(infile1,type='fits')
        self.kcor=atpy.Table(infile2,type='fits') 
        self.ir=atpy.Table(infile3,type='fits')
 
class baseCluster:
    def __init__(self,clustername):
        self.clustername=clustername
        if len(clustername) < 14:
            step1=self.clustername.split('.')
            step2=step1[1].split('-')
            self.masterClusterName=step1[0]+'-'+step2[1]
            self.readmastertable()
        #use CLUSTER_FULLNAME to get index of cluster or group members
        if len(self.clustername)<14:
            self.clustername=self.clustername+" "
        self.clMemIndex=where(edi.spec1d.CLUSTER_FULLNAME==self.clustername)
        self.sigma=clustersigma[clustername]
        self.redshift=clusterz[clustername]
         
    def readmastertable(self):
        infile=catalogdir+self.masterClusterName+'mastertable.fits'
        self.edat=atpy.Table(infile)
         
    def plotpositions(self):
        figure()
        plot(self.edat.RA,self.edat.DEC,'k.')
        xlabel('RA (deg)')
        ylabel('Dec (deg)')
        title(self.clustername)
         
    def plotVIvsMv(self):
        figure()
        self.vi=tuple(v-i for v,i in zip(self.edat.magV,self.edat.magI))
        self.vimem=[]
        self.mvmem=[]
        self.lirmem=[]
        for m in range(len(self.edat.newspecmatchflag)):
            if self.edat.newspecmatchflag[m]==1:
                self.vimem.append(self.vi[m])
                self.mvmem.append(self.edat.MV[m])
                self.lirmem.append(self.edat.Lir[m])
        scatter(self.mvmem,self.vimem,c=log10(self.lirmem),s=30,vmin=log10(5e9), vmax=12.1)
        lf=LogFormatter(10,labelOnlyBase=False)
        self.loglir=[int(log10(x)) for x in self.lirmem]
        clb=colorbar(ticks=self.loglir, format=lf)
        clb.set_label(r'Log(Lir)')
        xlabel('MV')
        ylabel('V-I')
        title(self.clustername)
         
    def posPlot(self):
        figure()
        self.memra=[]
        self.memdec=[]
        self.lirmem=[]
        for m in range(len(self.edat.newspecmatchflag)):
            if self.edat.newspecmatchflag[m]==1:
                self.memra.append(self.edat.RA[m])
                self.memdec.append(self.edat.DEC[m])
                self.lirmem.append(self.edat.Lir[m])
        scatter(self.edat.RA,self.edat.DEC,c=log10(self.edat.Lir),s=15,vmin=log10(5e9), vmax=12.1)
        scatter(self.memra,self.memdec,c=log10(self.lirmem),s=50,vmin=log10(5e9), vmax=12.1)
        #lf=LogFormatter(10,labelOnlyBase=False)
        #self.loglir=[int(log10(x)) for x in self.edat.Lir]
        #clb=colorbar(ticks=self.loglir, format=lf)
        #clb.set_label(r'Log(Lir)')
        colorbar()
        xlabel('RA')
        ylabel('Dec')
        title(self.clustername)
 
    def plotWithJMtables(self):
        #putting this into an init fn is a work in progress-until I have it working, I am doing this
        self.allmem=edi.spec1d.MEMBERFLAG=='1 '
        self.nameSpaces=self.clustername.split('.')[0]+'  '
        #compinsate for the exceptions, cl105411 and cl105412
        if self.nameSpaces=="cl1054  ":
            if self.clustername=="cl1054-1146":
                self.nameSpaces="cl105411"
                print(self.nameSpaces)
            else:
                self.nameSpaces="cl105412"
                print(self.nameSpaces)
        self.clandf=edi.spec1d.CLUSTER==self.nameSpaces
        self.clmem=[a*b for a,b in zip(self.allmem,self.clandf)]
        self.clmemIndex=where(self.clmem)
        self.clandfIndex=where(self.clandf)
        self.memra=edi.spec1d.RA[self.clmemIndex]
        self.memdec=edi.spec1d.DEC[self.clmemIndex]
        self.loglirmem=edi.ir.LOG_LIR[self.clmemIndex] # NOTE - this is already in log
        self.logLirMemCor=[x-log10(3.839*10**33) for x in self.loglirmem]
        vminAll=log10(5e9)
        vmaxAll=12.1
        self.logLirAll=edi.ir.LOG_LIR[self.clandfIndex]
        self.logLirAllCor=[x-log10(3.839*10**33) for x in self.logLirAll]
        #possition plot
        figure()
        scatter(edi.spec1d.RA[self.clandfIndex],edi.spec1d.DEC[self.clandfIndex],c=self.logLirAllCor,s=25,vmin=vminAll,vmax=vmaxAll)
        scatter(self.memra,self.memdec,c=self.logLirMemCor,s=50,vmin=vminAll,vmax=vmaxAll)
        cbar=colorbar()
        cbar.set_label(r'Log(Lir)')
        xlabel('RA')
        ylabel('Dec')
        title(self.clustername)
        #V-I vs. V
        self.magVwF=edi.kcor.UBVRIJHK_ABSMAG_00[self.clandfIndex,2]
        self.magIwF=edi.kcor.UBVRIJHK_ABSMAG_00[self.clandfIndex,4]
        self.vMinIwF=tuple(v-i for v,i in zip(self.magVwF,self.magIwF))
        self.magV=edi.kcor.UBVRIJHK_ABSMAG_00[self.clmemIndex,2]
        self.magI=edi.kcor.UBVRIJHK_ABSMAG_00[self.clmemIndex,4]
        self.vMinI=tuple(v-i for v,i in zip(self.magV,self.magI))        
        figure()
        scatter(self.magVwF,self.vMinIwF,c=self.logLirAllCor,s=25,vmin=vminAll,vmax=vmaxAll)
        scatter(self.magV,self.vMinI,c=self.logLirMemCor,s=50,vmin=vminAll,vmax=vmaxAll)
        cbar=colorbar()
        cbar.set_label(r'Log(Lir)')
        xlabel('Mag V')
        ylabel('Mag V-Mag I')
        title(self.clustername)
        figure()
        scatter(self.magV,self.vMinI,c=self.logLirMemCor,s=50,vmin=vminAll,vmax=vmaxAll)
        cbar=colorbar()
        cbar.set_label(r'Log(Lir)')
        xlabel('Mag V')
        ylabel('Mag V-Mag I')
        title(self.clustername)
 
    def calcFrac(self):
        self.loglirmem=edi.ir.LOG_LIR[self.clMemIndex]
        self.magVcl=edi.kcor.UBVRIJHK_ABSMAG_00[self.clMemIndex,2]
        self.mm24=edi.ir.MATCHFLAG24[self.clMemIndex]==1
        flag1=(self.magVcl<-20.5) & (edi.ir.MATCHFLAG24[self.clMemIndex]>-.1)
        clTot=sum(flag1)
        flag2=(self.magVcl<-20.5) & (self.loglirmem>10.9+log10(3.839*10**33)) & (self.mm24)
        clLIRG=sum(flag2)
        clFrac=float(clLIRG)/float(clTot)
        low,up=Binomial_lim(float(clLIRG),float(clTot))
        #print("Total: "+str(clTot)+"\nLIRGs: "+str(clLIRG)+"\nFraction: "+str(clFrac))
        totals.append(clTot)
        lirgs.append(clLIRG)
        fractions.append(float("%.2f" % (clFrac*100)))
        lowerErr.append(float("%.2f" % (low*100)))
        upperErr.append(float("%.2f" % (up*100)))
        zs.append(self.redshift)
        sigmas.append(self.sigma)
 
         
class ediscsField:
    def __init__(self):
       flag1=(edi.spec1d.MEMBERFLAG=="0 ")
       flag2=(edi.spec1d.Z>.4) & (edi.spec1d.Z<.8)
       self.fieldIndex=where(flag1 & flag2)
    def test(self):
        print self.fieldIndex
    def calcFieldLirgs(self):
        self.loglirfield=edi.ir.LOG_LIR[self.fieldIndex]
        self.magVf=edi.kcor.UBVRIJHK_ABSMAG_00[self.fieldIndex,2]
        self.fm24=edi.ir.MATCHFLAG24[self.fieldIndex]==1
        flag3=(self.magVf<-20.5) & (edi.ir.MATCHFLAG24[self.fieldIndex]>-.1)
        fTot=sum(flag3)
        flag4=(self.magVf<-20.5) & (self.loglirfield>10.9+log10(3.839*10**33)) & (self.fm24)
        fLIRG=sum(flag4)
        fFrac=float(fLIRG)/float(fTot)
        flow,fup=Binomial_lim(float(fLIRG),float(fTot)) 
        print("Total Field Sample: "+str(fTot)+"\nLIRGs: "+str(fLIRG)+"\nFraction: "+str(fFrac)+'\t'+str(flow)+'\t'+str(fup))
    def redShiftHist(self):
        self.redshift=edi.spec1d.Z[self.fieldIndex]
        figure()
        hist(self.redshift,bins=20,color='r')
        title('Redshift of Field Sample')
        xlabel('redshift')
        ylabel('Number of Galaxies')
        show()
 
edi=ediscsall()     
cl1018=baseCluster('cl1018.8-1211')
cl1037=baseCluster('cl1037.9-1243')
cl1037a=baseCluster('cl1037.9-1243a')
cl1040=baseCluster('cl1040.7-1155')
cl1040a=baseCluster('cl1040.7-1155a')
cl1040b=baseCluster('cl1040.7-1155b')
cl105411=baseCluster('cl1054.4-1146')
cl105411a=baseCluster('cl1054.4-1146a')
cl105412=baseCluster('cl1054.7-1245')
cl105412a=baseCluster('cl1054.7-1245a')
cl1059=baseCluster('cl1059.2-1253')
cl1103=baseCluster('cl1103.7-1245')
cl1103a=baseCluster('cl1103.7-1245a')
cl1103b=baseCluster('cl1103.7-1245b')
cl1138=baseCluster('cl1138.2-1133')
cl1138a=baseCluster('cl1138.2-1133a')
cl1202=baseCluster('cl1202.7-1224')
cl1216=baseCluster('cl1216.8-1201')
cl1227=baseCluster('cl1227.9-1138')
cl1227a=baseCluster('cl1227.9-1138a')
cl1232=baseCluster('cl1232.5-1250')
cl1301=baseCluster('cl1301.7-1139')
cl1301a=baseCluster('cl1301.7-1139a')
cl1353=baseCluster('cl1353.0-1137')
cl1354=baseCluster('cl1354.2-1230')
cl1354a=baseCluster('cl1354.2-1230a')
cl1411=baseCluster('cl1411.1-1148')
cl1420=baseCluster('cl1420.3-1236')
 
def gLumHist():
    magG=edi.kcor.UGRIZ_ABSMAG_00[:,1]
    magFlag=(magG>-999)
    magIndex=where(magFlag)
    magGs=edi.kcor.UGRIZ_ABSMAG_00[magIndex,1]
    lG=[((y-4.83)/(-2.5)) for y in magGs[0]]
    #plot hist
    figure()
    t=hist(lG,bins=25,label='EDisCS Sample')
    xlabel('log(L/Lsun)')
    ylabel('N')
    legend(loc=2)
    #plot bin heights vs. bin centers
    figure()
    yvals=t[0]
    logy=log10(yvals)
    xcenters=[]
    for i in range(len(yvals)):
        xcenters.append((t[1][i]+t[1][i+1])/2.)
    plot(xcenters,logy,'mo',label='EDisCS Sample')
    xlabel('log(L/Lsun)')
    ylabel('log(N)')
    legend(loc=2)
 
def irLumHist():
    #import LOG IR luminosity values and throw out filler values (-99 etc.)
    logIR=edi.ir.LOG_LIR
    mem=edi.spec1d.MEMBERFLAG
    flag1=(logIR>0) & (mem=="1 ")
    flagIndex=where(flag1)
    """irFlag=(logIR>0)
    memFlag=(mem==1)
    irIndex=where(irFlag)
    memInded=where(memFlag)
    logIR=edi.ir.LOG_LIR[irIndex]"""
    logIR=edi.ir.LOG_LIR[flagIndex]
    print len(logIR)
    #Make hist to get bin heights
    #print logIR
    figure()
    hs1=hist(logIR,bins=12) #HISTOGRAM
    clf()
    #Plot heights vs centers and error bars
    yvals=hs1[0]
    logy=log10(yvals)
    yerr=sqrt(yvals) #Still need to decide if this is the best way to do this
    yerrup=(log10(yvals+yerr)-log10(yvals))
    yerrdown=(log10(yvals)-log10(yvals-yerr))
    yerrs=zip(yerrdown,yerrup)
    yerrs=array(yerrs).T
    xcenters=[]
    for i in range(len(yvals)):
        xcenters.append((hs1[1][i]+hs1[1][1+i])/2.)
    plot(xcenters,logy,'mo',label='EDisCS data')
    errorbar(xcenters,logy,yerr=yerrs,label='error in y')
    xlabel('log(LIR)')
    ylabel('log(N)')
    #Fit plot using Chi^2 minimization
    chisqmin=1000000.
    alphamin=0.
    logLsmin=0.
    logPhiSmin=0.
    for alpha in arange(-5.,5.,.1):
        for logLs in arange(43.,45.,.1):
            for logPhiS in arange(0.,5.,.1):
                yfit=log(10.)*(10.**logPhiS*(((10.**array(xcenters))/10.**logLs)**(alpha+1))*exp(-(10.**array(xcenters))/10.**logLs))
                chisq=sum((array(log10(yfit)-log10(yvals))**2)/(array(yerr)**2))
                chisqT=((array(log10(yfit)-log10(yvals))**2)/(array(yerr)**2))                
                if chisq<chisqmin and not(math.isnan(chisq)):
                    alphamin=alpha
                    logLsmin=logLs
                    logPhiSmin=logPhiS
                    chisqmin=chisq
                    yplot=yfit
    plot(xcenters,log10(yplot),'g-',label='Fit')
    legend(loc=3)
    text(44.2,-.4,"Chi^2 Min:  "+str("%.2f" % chisqmin)+"\nAlpha:  "+str("%.2f" % alphamin)+"\nlogLstar:  "+str("%.2f" % logLsmin)+"\nlogPhiS:  "+str(logPhiSmin))
    show()
     
     
totals=[]
lirgs=[]
fractions=[]
lowerErr=[]
upperErr=[]
zs=[]
sigmas=[]
fullsample=[cl1018,cl1037,cl1037a,cl1040,cl1040a,cl1040b,cl105411,cl105411a,cl105412,cl105412a,cl1059,cl1103,cl1103a,cl1103b,cl1138,cl1138a,cl1202,cl1216,cl1227,cl1227a,cl1232,cl1301,cl1301a,cl1353,cl1354,cl1354a,cl1411,cl1420]
for cl in fullsample:
    #print cl.clustername
    cl.calcFrac()
f=open('v2fractions.txt','w')
for i in range(len(totals)):
    f.write(fullsample[i].clustername+'\t'+str(totals[i])+'\t'+str(lirgs[i])+'\t'+str(fractions[i])+'\t'+str(lowerErr[i])+'\t'+str(upperErr[i])+'\n')
f.close()
     
field=ediscsField()
"""
figure()
errorbar(zs,fractions,yerr=[lowerErr,upperErr],fmt='o')
xlabel('Redshift')
ylabel('Percent of LIRGs')
title('Percent of LIRGs vs. Redshift')
xx=[.3,1]
fFr=[18.1,18.1]
fLo=[13.3,13.3]
fUp=[35.6,35.6]
plot(xx,fFr,'g-',xx,fLo,'g--',xx,fUp,'g--')
ylim([0,100])
xlim([.3,1])
show()
spearman(zs,fractions)
 
figure()
errorbar(sigmas,fractions,yerr=[lowerErr,upperErr],fmt='o')
xlabel('Sigma')
ylabel('Percent of LIRGs')
title('Percent of LIRGs vs. Velocity Dispersion')
xx=[0,1200]
fFr=[18.1,18.1]
fLo=[13.3,13.3]
fUp=[35.6,35.6]
plot(xx,fFr,'g-',xx,fLo,'g--',xx,fUp,'g--')
ylim([0,100])
show()
spearman(sigmas,fractions)
 
"""
 
"""
figure()
plot(zs,sigmas,'bo')
xlabel('Redshift')
ylabel('Sigma')
title('Sigma vs. Redshift')
show()
"""
